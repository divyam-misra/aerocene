# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-dynamodb.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-rds.html

service: aerocene

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-plugin-simulate

custom:
  scrapeTableName: 'scrape-table-${self:provider.stage}'
  instagramPostTableName: 'instagram-post-table-${self:provider.stage}'
  instagramCursorTableName: 'instagram-cursor-table-${self:provider.stage}'


  wsgi:
    app: app.app
    packRequirements: false

  pythonRequirements:
    dockerizePip: non-linux
    zipImport: true

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:

    # allow all actions on the posts table
    - Effect: Allow
      Action:
        - "*"
      Resource:
        - { "Fn::GetAtt": ["InstagramPostDynamoDBTable", "Arn"] }
    - Effect: Allow
      Action:
        - "*"
      Resource:
        - { "Fn::GetAtt": ["InstagramCursorDynamoDbTable", "Arn"] }
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
  environment:
    SCRAPE_TABLE: ${self:custom.scrapeTableName}
    INSTAGRAM_POST_TABLE: ${self:custom.instagramPostTableName}
    INSTAGRAM_CURSOR_TABLE: ${self:custom.instagramCursorTableName}

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  posts:
    handler: wsgi.handler
    events:
      - http: 'POST /posts'
  # hello:
  #   handler: functions.hello
  derp:
    handler: functions.derp
  schmerp:
    handler: app.schmerp
  herp:
    handler: functions.herp
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          arn:
            Fn::GetAtt:
              - InstagramCursorDynamoDbTable
              - StreamArn

  scrapeInstagram:
    handler: wsgi.handler
    events:
      - http: 'GET /scrape_instagram'


resources:
  Resources:
    ScrapeDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.scrapeTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
          # -
          #   AttributeName: start_page
          #   AttributeType: N
          # -
          #   AttributeName: end_page
          #   AttributeType: N
          # -
          #   AttributeName: location
          #   AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    InstagramCursorDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.instagramCursorTableName}
        AttributeDefinitions:
          -
            # the string that stores the cursor
            AttributeName: cursor
            AttributeType: S
        KeySchema:
          -
            # we want these to be unique
            AttributeName: cursor
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

        # create a stream for this table
        StreamSpecification:
          # enable the stream
          # make it so that the handler receives
          # the old and new versions of each item
          StreamViewType: NEW_AND_OLD_IMAGES

    InstagramPostDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.instagramPostTableName}
        AttributeDefinitions:
          -
            # the id of the post
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            # these should be unique
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # InstagramUsersDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:custom.instagramUserTableName}

    # UsersDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: userId
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: userId
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:custom.tableName}


