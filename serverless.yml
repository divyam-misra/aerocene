# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-dynamodb.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-rds.html

service: aerocene

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local

custom:
  tableName: 'users-table-${self:provider.stage}'
  instagramUserTableName: 'instagram-users-table-${self:provider.stage}'
  instagramPostTableName: 'instagram-post-table-${self:provider.stage}'
  instagramCursorTableName: 'instagram-cursor-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
    zipImport: true

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:
    # Can you collapse these into one? Declaring this effect for
    # all resources?
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["InstagramUsersDynamoDBTable", "Arn" ] }
      # NEED TO SPECIFY THESE FOR NEW TABLES IF STUFF ISNT WORKING
  environment:
    USERS_TABLE: ${self:custom.tableName}
    INSTAGRAM_USERS_TABLE: ${self:custom.instagramUserTableName}
    INSTAGRAM_POST_TABLE: ${self:custom.instagramPostTableName}
    INSTAGRAM_CURSOR_TABLE: ${self:custom.instagramCursorTableName}

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  posts:
    handler: wsgi.handler
    events:
      - http: 'POST /posts'
  hello:
    handler: functions.hello

  scrapeInstagram:
    handler: wsgi.handler
    events:
      - http: 'GET /scrape_instagram'


resources:
  Resources:
    InstagramUsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.instagramUserTableName}

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

    InstagramCursorDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.instagramCursorTableName}
        AttributeDefinitions:
          -
            # the string that stores the cursor
            AttributeName: cursor
            AttributeType: S
        KeySchema:
          -
            # we want these to be unique
            AttributeName: cursor
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1


    InstagramPostDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.instagramPostTableName}
        AttributeDefinitions:
          -
            # the id of the post
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            # these should be unique
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


